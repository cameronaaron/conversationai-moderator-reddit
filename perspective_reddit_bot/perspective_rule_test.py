# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A class for checking and applying moderation rules."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import unittest

import perspective_rule


class MockComment(object):
  def __init__(self, parent_id, link_id):
    self.parent_id = parent_id
    self.link_id = link_id


NESTED_COMMENT = MockComment(parent_id=1, link_id=123)
TOPLEVEL_COMMENT = MockComment(parent_id=1, link_id=1)


class PerspectiveRuleTest(unittest.TestCase):

  def test_check_model_rules_basic(self):
    rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5', 'model2': '> 0.8'},
        {},
        'report')
    comment = NESTED_COMMENT
    scores_both_over_threshold = {'model1': 0.8, 'model2': 0.9}
    scores_both_under_threshold = {'model1': 0.2, 'model2': 0.1}
    scores_only_one_over_threshold = {'model1': 1.0, 'model2': 0.0}
    self.assertTrue(rule.check_model_rules(scores_both_over_threshold, comment))
    self.assertFalse(rule.check_model_rules(scores_both_under_threshold,
                                            comment))
    self.assertFalse(rule.check_model_rules(scores_only_one_over_threshold,
                                            comment))

  def test_check_model_rules_with_comment_features(self):
    toplevel_rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5'},
        {'toplevel_only': True},
        'report')
    normal_rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5'},
        {},
        'report')
    scores_over_threshold = {'model1': 0.8}

    self.assertTrue(toplevel_rule.check_model_rules(scores_over_threshold,
                                                    TOPLEVEL_COMMENT))
    self.assertTrue(normal_rule.check_model_rules(scores_over_threshold,
                                                  NESTED_COMMENT))
    self.assertFalse(toplevel_rule.check_model_rules(scores_over_threshold,
                                                     NESTED_COMMENT))

  def test_check_model_scores_fails_when_missing_scores(self):
    rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5'},
        {},
        'report')
    scores_missing_model1 = {'model2': 100}
    with self.assertRaises(KeyError):
      rule.check_model_rules(scores_missing_model1, NESTED_COMMENT)

  def test_construction_fails_when_missing_required_values(self):
    # Model rules required.
    with self.assertRaises(ValueError):
      rule = perspective_rule.Rule('rulename',
                                   {},
                                   {},
                                   'report')
    # Action name required.
    with self.assertRaises(ValueError):
      rule = perspective_rule.Rule('rulename',
                                   {'model1': '> 0.5'},
                                   {},
                                   '')

  def test_construction_fails_on_unsupported_action(self):
    with self.assertRaises(ValueError):
      rule = perspective_rule.Rule('rulename',
                                   {'model1': '> 0.5'},
                                   {},
                                   'ban_forever')

  def test_autogenerated_rule_name(self):
    self.assertEqual(
        'r1',
        perspective_rule.Rule('r1', {'m1': '> 0.5'}, {}, 'report').name)
    self.assertEqual(
        'm1',
        perspective_rule.Rule(None, {'m1': '> 0.5'}, {}, 'report').name)
    self.assertEqual(
        'm1__m2',
        perspective_rule.Rule(None, {'m1': '> 0.5', 'm2': '> 0.5'}, {},
                              'report').name)

  def test_autogenerated_str(self):
    rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5', 'model2': '> 0.8'},
        {},
        'report')
    self.assertTrue(str(rule).startswith(
        'Perspective Bot rule triggered: rulename: '))
    self.assertIn('model1 > 0.5', str(rule))
    self.assertIn('model2 > 0.8', str(rule))

  def test_str_from_report_reason(self):
    rule = perspective_rule.Rule(
        'rulename',
        {'model1': '> 0.5', 'model2': '> 0.8'},
        {},
        'report',
        'model1 and model2 triggered')
    self.assertEqual(
        'model1 and model2 triggered',
        str(rule))

if __name__ == '__main__':
    unittest.main()
